cmake_minimum_required(VERSION 3.5.1)

project(pr_tsrpy)

if(NOT PR_TSRPY_PYTHON_VERSION)
  set(PR_TSRPY_PYTHON_VERSION 3.4 CACHE STRING "Choose the target Python version (e.g., 3.4, 2.7)" FORCE)
endif()

find_package(PythonInterp ${PR_TSRPY_PYTHON_VERSION} QUIET)
if(NOT PythonInterp_FOUND)
  message(STATUS "BUILD_PR_TSRPY is ON, but failed to find PythonInterp. "
    "Disabling pr_tsrpy."
  )
  return()
endif()
execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
  "from distutils.sysconfig import get_python_lib;\
  print(get_python_lib(plat_specific=True, prefix=''))"
  OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

find_package(PythonLibs ${PR_TSRPY_PYTHON_VERSION} QUIET)
if(NOT PythonLibs_FOUND)
  message(STATUS "BUILD_PR_TSRPY is ON, but failed to find PythonLibs. "
    "Disabling pr_tsrpy."
  )
  return()
endif()

# Find pybind11
# Needs to set PYBIND11_PYTHON_VERSION before finding pybind11
set(PYBIND11_PYTHON_VERSION ${PR_TSRPY_PYTHON_VERSION})
find_package(pybind11 2.2.0 QUIET)
if(NOT pybind11_FOUND)
  message(STATUS "BUILD_PR_TSRPY is ON, but failed to find pybind11 >= "
    "2.2.0. Disabling pr_tsrpy."
  )
  return()
endif()

find_package(Eigen3 REQUIRED)

include_directories(SYSTEM
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_BINARY_DIR}/include
  ${PYTHON_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
)

include(CheckCXXSourceCompiles)
set(CMAKE_REQUIRED_DEFINITIONS "")
set(CMAKE_REQUIRED_FLAGS "-std=c++11")
set(CMAKE_REQUIRED_INCLUDES ${DART_INCLUDE_DIRS})
set(CMAKE_REQUIRED_LIBRARIES ${DART_LIBRARIES})

#===================
# Chimera Settings
#===================

if (BUILD_CHIMERA)
  find_package(chimera QUIET)

  set(CHIMERA_CONFIG "${CMAKE_CURRENT_SOURCE_DIR}/chimera/chimera.yml")
  if(chimera_FOUND)
    add_chimera_binding(TARGET "${PROJECT_NAME}_CHIMERA"
      MODULE "${PROJECT_NAME}"
      CONFIGURATION "${CHIMERA_CONFIG}"
      SOURCES "chimera/chimera.hpp"
      DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/src/generated"
      DEBUG EXCLUDE_FROM_ALL
    )
    target_link_libraries("${PROJECT_NAME}_CHIMERA"
      PUBLIC
        ${PYTHON_LIBRARIES}
    )
    add_custom_target(binding DEPENDS "${PROJECT_NAME}_CHIMERA_REBUILD")
  else()
    add_custom_target(binding
      COMMAND ${CMAKE_COMMAND} -E cmake_echo_color --red "ERROR: Cannot generate bindings without \\'chimera\\' installed."
      COMMAND false
    )
  endif()
endif()

# Create a target to build generated bindings.
set(SOURCES_TXT "${CMAKE_CURRENT_SOURCE_DIR}/src/generated/sources.txt")
if(EXISTS "${SOURCES_TXT}")
  file(STRINGS "${SOURCES_TXT}" SOURCES_GENERATED_RELATIVE NO_HEX_CONVERSION)

  set(SOURCES_GENERATED)
  foreach(relative_path ${SOURCES_GENERATED_RELATIVE})
    list(APPEND SOURCES_GENERATED "${CMAKE_CURRENT_SOURCE_DIR}/src/generated/${relative_path}")
  endforeach()

  add_library("${PROJECT_NAME}" MODULE
    ${SOURCES_GENERATED}
    src/eigen_geometry_py.cpp
  )
  target_include_directories("${PROJECT_NAME}"
    PUBLIC
      ${CMAKE_CURRENT_SOURCE_DIR}
  )
  target_link_libraries("${PROJECT_NAME}"
    PUBLIC
      ${PYTHON_LIBRARIES}
      pr_tsr
  )
  set_target_properties("${PROJECT_NAME}" PROPERTIES
    PREFIX ""
    SUFFIX ".so"  # python uses '.so' extension even on macOS
  )
  if(CMAKE_COMPILER_IS_GNUCXX)
    target_compile_options("${PROJECT_NAME}"
      PRIVATE -fabi-version=6
    )
  endif()

  install(TARGETS "${PROJECT_NAME}"
    LIBRARY DESTINATION "${PYTHON_SITE_PACKAGES}"
  )
else()
  add_custom_target(${PROJECT_NAME} ALL
    COMMAND ${CMAKE_COMMAND} -E cmake_echo_color --red "ERROR: Generate bindings using \\'make binding\\' before attempting to build."
    COMMAND false
  )
endif()
